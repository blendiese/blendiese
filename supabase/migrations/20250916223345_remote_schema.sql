
-- \restrict GfdTeYRC1DKgYQSM9daXF3nllatQcbH6FCFCuEGv68IGxnsnAu4PpkdDr2VLPif


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "private";


ALTER SCHEMA "private" OWNER TO "postgres";


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."upsert_github_token"("token" character varying) RETURNS "void"
    LANGUAGE "plpgsql" SECURITY DEFINER set search_path = ''
    AS $$declare new_id int8;
BEGIN
  insert into github_token_headers (user_id, created_at)
  values (auth.uid(), now())
  on conflict (user_id) do update
  set created_at = excluded.created_at
  returning id into new_id;

  delete from private.github_tokens where id = new_id;

  insert into private.github_tokens (id, user_id, token)
  values (new_id, auth.uid(), token);
END;$$;


ALTER FUNCTION "public"."upsert_github_token"("token" character varying) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "private"."github_tokens" (
    "id" bigint NOT NULL,
    "token" character varying NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "private"."github_tokens" OWNER TO "postgres";


ALTER TABLE "private"."github_tokens" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "private"."github_tokens_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."github_repositories" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "repository_name" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    CONSTRAINT "todos_task_check" CHECK (("char_length"("repository_name") > 3))
);


ALTER TABLE "public"."github_repositories" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."github_token_headers" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."github_token_headers" OWNER TO "postgres";


ALTER TABLE "public"."github_token_headers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."github_token_headers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."github_users" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "username" character varying NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."github_users" OWNER TO "postgres";


ALTER TABLE "public"."github_users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."github_users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."github_repositories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."todos_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "private"."github_tokens"
    ADD CONSTRAINT "github_tokens_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."github_repositories"
    ADD CONSTRAINT "github_repositories_pkey" PRIMARY KEY ("user_id", "repository_name");



ALTER TABLE ONLY "public"."github_token_headers"
    ADD CONSTRAINT "github_token_headers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."github_token_headers"
    ADD CONSTRAINT "github_token_headers_user_id_key" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."github_users"
    ADD CONSTRAINT "github_users_pkey" PRIMARY KEY ("username", "user_id");



ALTER TABLE ONLY "private"."github_tokens"
    ADD CONSTRAINT "github_tokens_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."github_token_headers"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "private"."github_tokens"
    ADD CONSTRAINT "github_tokens_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."github_token_headers"
    ADD CONSTRAINT "github_token_headers_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."github_users"
    ADD CONSTRAINT "github_users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."github_repositories"
    ADD CONSTRAINT "todos_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



CREATE POLICY "Enable delete for users based on user_id" ON "private"."github_tokens" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "private"."github_tokens" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users based on user_id" ON "private"."github_tokens" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



ALTER TABLE "private"."github_tokens" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable delete for users based on user_id" ON "public"."github_token_headers" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."github_users" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."github_token_headers" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."github_users" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for users based on user_id" ON "public"."github_token_headers" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."github_token_headers" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."github_users" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Individuals can create repsotories." ON "public"."github_repositories" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Individuals can delete their own repositories." ON "public"."github_repositories" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Individuals can update their own repositories." ON "public"."github_repositories" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Individuals can view their own repositories. " ON "public"."github_repositories" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



ALTER TABLE "public"."github_repositories" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."github_token_headers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."github_users" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."upsert_github_token"("token" character varying) TO "anon";
GRANT ALL ON FUNCTION "public"."upsert_github_token"("token" character varying) TO "authenticated";
GRANT ALL ON FUNCTION "public"."upsert_github_token"("token" character varying) TO "service_role";


















GRANT ALL ON TABLE "private"."github_tokens" TO "anon";
GRANT ALL ON TABLE "private"."github_tokens" TO "authenticated";
GRANT ALL ON TABLE "private"."github_tokens" TO "service_role";



GRANT ALL ON SEQUENCE "private"."github_tokens_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "private"."github_tokens_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "private"."github_tokens_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."github_repositories" TO "anon";
GRANT ALL ON TABLE "public"."github_repositories" TO "authenticated";
GRANT ALL ON TABLE "public"."github_repositories" TO "service_role";



GRANT ALL ON TABLE "public"."github_token_headers" TO "anon";
GRANT ALL ON TABLE "public"."github_token_headers" TO "authenticated";
GRANT ALL ON TABLE "public"."github_token_headers" TO "service_role";



GRANT ALL ON SEQUENCE "public"."github_token_headers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."github_token_headers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."github_token_headers_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."github_users" TO "anon";
GRANT ALL ON TABLE "public"."github_users" TO "authenticated";
GRANT ALL ON TABLE "public"."github_users" TO "service_role";



GRANT ALL ON SEQUENCE "public"."github_users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."github_users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."github_users_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."todos_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."todos_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."todos_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























-- \unrestrict GfdTeYRC1DKgYQSM9daXF3nllatQcbH6FCFCuEGv68IGxnsnAu4PpkdDr2VLPif

RESET ALL;
